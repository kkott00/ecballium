// Generated by CoffeeScript 1.6.2
(function() {
  var Ecballium;

  window.imports = {};

  window.load = function(src, args) {
    var d, head, helper, script;

    d = $.Deferred();
    helper = function() {
      console.log('helper', src, $.fn.textwidget);
      imports[src] = true;
      return d.resolve();
    };
    if (src in imports) {
      helper();
      return d.promise();
    }
    head = document.getElementsByTagName('head')[0];
    script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = src;
    head.appendChild(script);
    script.onreadystatechange = function() {
      if (this.readyState === 'complete') {
        return helper();
      }
    };
    script.onload = helper;
    return d.promise();
  };

  window.wait = function(delay) {
    var cb, d,
      _this = this;

    d = $.Deferred();
    cb = function() {
      console.log('wait done', delay);
      return d.resolve();
    };
    setTimeout(cb, delay);
    return d.promise();
  };

  Ecballium = (function() {
    Ecballium.prototype.state = 'init';

    Ecballium.prototype.logbuf = '';

    Ecballium.prototype.skipScnOnError = true;

    Ecballium.prototype.animate = false;

    Ecballium.prototype.DELAY = 5000;

    Ecballium.prototype.REPEAT_TIME = 5;

    Ecballium.prototype.DELAY_FOR_REPEAT = 1000;

    Ecballium.prototype.root = $(document);

    Ecballium.prototype.window = window;

    Ecballium.prototype.navigator = "" + navigator.appVersion + " | " + navigator.platform;

    function Ecballium(opts) {
      var path,
        _this = this;

      $.extend(this, opts);
      this.scripts = [];
      this.loc = {
        file: 0,
        scn: 0,
        step: 0,
        outline: 0
      };
      console.log('****   new ecb', this.loc.step, this.scripts);
      this.URL = '/' + (window.location.pathname.split('/').slice(1, -1)).join('/');
      if (!this.hash) {
        this.hash = window.location.hash.slice(1);
      }
      if (this.hash === '') {
        this.hash = 'console';
      }
      console.log('URL', this.URL);
      $(this).on('ecb_next', function(e, state) {
        console.log('ecb_next_trigger', state);
        e.stopImmediatePropagation();
        return _this.state_machine(state);
      });
      path = window.location.pathname.replace('launcher.html', 'stub.html');
      this.W = opener;
      this.frame = $(this.W.document);
      this.scripts.push(this.hash);
      if (this.par) {
        this.scripts = this.scripts.concat(this.par.scripts);
      }
      if (this.console) {
        this.file = this.compile_gerkhin(this.console.text);
      } else {
        this.file = this.get_file(this.hash);
      }
      wait(1000).done(function() {
        return _this.init();
      });
    }

    Ecballium.prototype.next = function(state) {
      console.log('next', state);
      this.state = state;
      return $(this).trigger('ecb_next', state);
    };

    Ecballium.prototype.state_machine = function(state, e) {
      var _this = this;

      console.log('state machine', state);
      switch (state) {
        case 'find_next_step':
          return this.find_next_step();
        case 'step_ready':
          if (this.inject()) {
            return this.run_step();
          } else {
            return wait(this.DELAY / 2 + 10).done(function() {
              return _this.next('step_ready');
            });
          }
          break;
        case 'step_done':
          return this.find_next_step();
        case 'feature_done':
          if (this.par) {
            this.par.last_child = this.par.child;
            this.par.child = void 0;
            return this.par.next('step_done');
          } else {
            return this.post('all tests done', 'all tests done');
          }
          break;
        default:
          throw "unknown state " + state;
      }
    };

    Ecballium.prototype.init = function() {
      var _this = this;

      if (!this.par) {
        window.addEventListener("message", function(e) {
          return _this.run_on_target_done(null, e.data);
        }, false);
      }
      /*
      load('lib.js').done ()=>
        load(@hash+'.js').done ()=>
          @get_file(@hash).done ()=>
            @next 'step_ready'
      */

      return this.next('step_ready');
    };

    Ecballium.prototype.get_file = function(file) {
      var _this = this;

      return $.get("" + this.URL + "/" + file + ".feature", null, null, 'text').done(function(data) {
        if (!_this.par) {
          $('textarea.editor').val(data);
        }
        _this.file = _this.compile_gerkhin(data);
        return console.log('compiled', _this.file);
      });
    };

    Ecballium.prototype.compile_gerkhin = function(data) {
      var curfile, current_scenario, current_screnario, current_step, gather_string, i, k, l, ln, n, od, outline, re, ti, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;

      current_scenario = null;
      n = 0;
      gather_string = false;
      curfile = {
        'scenarios': []
      };
      _ref = data.split('\n').concat(['end step']);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        n += 1;
        ti = i.trim();
        if (gather_string) {
          if (ti === '"""') {
            gather_string = false;
          } else {
            current_step[data] += "" + i + "\n";
          }
          continue;
        }
        if (ti === '') {
          continue;
        }
        if (i[0] === '#') {
          continue;
        }
        if (ti[0] === '|') {
          if (!('data' in current_step)) {
            current_step['data'] = [];
          }
          current_step['data'].push((function() {
            var _j, _len1, _ref1, _results;

            _ref1 = ti.slice(1, -1).split('|');
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              k = _ref1[_j];
              _results.push(k.trim());
            }
            return _results;
          })());
          continue;
        }
        if (ti === '"""') {
          gather_string = true;
          current_step['data'] = '';
          continue;
        }
        if (current_step) {
          if (current_step.desc === 'Examples:') {
            curfile['scenarios'].slice(-1)[0].outline = [];
            outline = current_step.data;
            _ref1 = outline.slice(1);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              k = _ref1[_j];
              od = {};
              _ref2 = outline[0];
              for (ln = _k = 0, _len2 = _ref2.length; _k < _len2; ln = ++_k) {
                l = _ref2[ln];
                od[l] = k[ln];
              }
              curfile['scenarios'].slice(-1)[0].outline.push(od);
            }
          } else {
            curfile['scenarios'].slice(-1)[0].steps.push(current_step);
          }
          current_step = null;
        }
        re = ti.replace(/^Scenario:/, '');
        if (re !== ti) {
          current_screnario = re;
          curfile['scenarios'].push({
            name: re.trim(),
            steps: []
          });
          continue;
        }
        re = ti.replace(/^Feature:/, '');
        if (re !== ti) {
          curfile['feature_name'] = re.trim();
          continue;
        }
        current_step = {
          desc: ti,
          line: n
        };
      }
      return curfile;
    };

    Ecballium.prototype.inject_script = function(name) {
      var e, fh, script;

      try {
        fh = this.frame.find('head');
        script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = "" + this.URL + "/" + name + ".js";
        fh[0].appendChild(script);
        return $(script).attr('x-injected', '');
      } catch (_error) {
        e = _error;
        return console.log("script " + name + " not found");
      }
    };

    Ecballium.prototype.inject = function() {
      var fh, scr,
        _this = this;

      this.frame = $(this.W.document);
      fh = this.frame.find('head');
      scr = fh.find('script[x-injected]');
      if (scr.length === 0) {
        this.inject_script('ecballiumbot');
        wait(2010).done(function() {
          var i, _i, _len, _ref, _results;

          _this.W.ecballiumbot.ecb = _this;
          _this.inject_script('lib');
          _ref = _this.scripts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push(_this.inject_script(i));
          }
          return _results;
        });
        return false;
      }
      return true;
    };

    Ecballium.prototype.find_next_step = function() {
      var file, scn;

      scn = this.loc2scn();
      this.loc.step += 1;
      if (this.loc.step >= scn.steps.length) {
        this.loc.step = 0;
        if ('outline' in scn) {
          this.loc.outline += 1;
          if (this.loc.outline >= scn.outline.length) {
            this.loc.outline = 0;
          } else {
            this.loc.scn -= 1;
          }
        }
        this.loc.scn += 1;
        file = this.file;
        if (this.loc.scn >= file.scenarios.length) {
          this.next('feature_done');
          return;
        }
      }
      return this.next('step_ready');
    };

    Ecballium.prototype.on_scenario_change = function() {
      return this.root = $(document);
    };

    Ecballium.prototype.loc2step = function() {
      var outline, scn, tmp;

      scn = this.loc2scn();
      tmp = $.extend({}, scn.steps[this.loc.step]);
      if ('outline' in scn) {
        outline = scn.outline[this.loc.outline];
        tmp.desc = tmp.desc.replace(/(<[^<>]+>)/, function(v) {
          return outline[v.slice(1, -1)];
        });
      }
      return tmp;
    };

    Ecballium.prototype.loc2scn = function() {
      return this.file.scenarios[this.loc.scn];
    };

    Ecballium.prototype.run_step = function() {
      var step;

      step = this.loc2step().desc;
      console.log('run_step', step, this.file, this.loc.step);
      this.post('pre');
      return this.W.postMessage(step, "" + this.W.location.protocol + "//" + this.W.location.host);
    };

    Ecballium.prototype.log = function(msg, obj) {
      this.logbuf += "" + (new Date()) + " " + msg + "\n";
      this.jsonobj = obj;
      return this.logbuf += JSON.stringify(obj, this.replacer, 1);
    };

    Ecballium.prototype.replacer = function(key, value) {
      var i, out, v;

      out = value;
      if (value === window) {
        out = '[window]';
      }
      if (value === document) {
        out = '[document]';
      }
      if (value && value.tagName) {
        v = $(value);
        out = {
          tag: v[0].tagName,
          attrs: (function() {
            var _i, _len, _ref, _results;

            _ref = v[0].attributes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              _results.push([i.name, i.value]);
            }
            return _results;
          })()
        };
      }
      return out;
    };

    Ecballium.prototype.post = function(status, msg) {
      var data, li, msg_el, step;

      if (msg == null) {
        msg = '';
      }
      if (status === 'all tests done') {
        data = {
          msg: msg,
          log: this.logbuf,
          navigator: this.navigator
        };
      } else if (status === 'pre') {
        step = this.loc2step();
        li = $("<dt class='pre_msg'>" + step.desc + "</dt>");
        $('.log dl').append(li);
        return;
      } else {
        step = this.loc2step();
        data = {
          msg: msg,
          file: this.hash,
          step: step.desc,
          line: step.line,
          log: this.logbuf,
          navigator: this.navigator
        };
      }
      this.logbuf = '';
      console.log('===', status, ' = ', data.step, data);
      msg_el = "<b>" + status + "</b>&nbsp;" + data.step;
      if (data.msg) {
        msg_el += "<div class='colapsible hidden'><pre>" + data.msg + "</pre></div>";
      }
      li = $("<dt>" + msg_el + "</dt>");
      $('.log dl dt.pre_msg').remove();
      $('.log dl').append(li);
      return li.find('.colapsible').click(function() {
        return $(this).toggleClass("hidden");
      });
    };

    Ecballium.prototype.run_on_target_done = function(data, status) {
      var _this = this;

      console.log('run_on_target_done', status);
      if (this.child) {
        this.child.run_on_target_done(data, status);
        return;
      }
      if (status === 'redirected') {
        this.post('success');
        return wait(this.DELAY / 2).done(function() {
          return _this.next('step_done');
        });
      } else if (status === 'failed') {
        this.post('failed', ecballium.last_exception.stack);
        if (!this.stop_on_any) {
          return this.next('step_done');
        }
      } else if (status === 'error') {
        this.post('failed', ecballium.last_exception.stack);
        this.loc.step = 1e10;
        if (!this.stop_on_any) {
          return this.next('step_done');
        }
      } else if (status === 'run_feature') {
        this.post('success');
        return this.run_feature(this.pending_feature);
      } else if (status === 'load_library') {
        this.post('success');
        this.inject_script(this.scripts.slice(-1)[0]);
        return wait(this.DELAY / 2).done(function() {
          return _this.next('step_done');
        });
      } else {
        this.post('success');
        if (this.after_step_delay) {
          debugger;
          wait(this.after_step_delay).done(function() {
            return _this.next('step_done');
          });
          return this.after_step_delay = null;
        } else {
          return this.next('step_done');
        }
      }
    };

    Ecballium.prototype.run_feature = function(f) {
      return this.child = new Ecballium({
        'par': this,
        'hash': f
      });
    };

    return Ecballium;

  })();

  $(function() {
    window.ecballium = new Ecballium();
    return $('button.run_script').on('click', function() {
      console.log($('textarea.editor').val());
      return ecballium.child = new Ecballium({
        'par': ecballium,
        'console': {
          'text': $('textarea.editor').val()
        }
      });
    });
  });

}).call(this);
